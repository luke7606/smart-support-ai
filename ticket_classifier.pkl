# ==============================
# 1. ENTRENAMIENTO DEL MODELO
# ==============================

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import pickle

# Datos de ejemplo - reemplazar con datos reales
data = {
    'texto': [
        "El sistema no arranca, error en la base de datos",
        "No puedo acceder al correo electr√≥nico",
        "Solicitud de acceso a nueva cuenta",
        "C√≥mo se instala el software",
        "Error cr√≠tico: pantalla azul al iniciar",
        "Consulta sobre precios del servicio",
        "Reporte de falla en la red"
    ],
    'categoria': [
        'Incidente',
        'Incidente',
        'No Incidente',
        'No Incidente',
        'Incidente',
        'No Incidente',
        'Incidente'
    ]
}

df = pd.DataFrame(data)

# Vectorizador TF-IDF
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['texto'])
y = df['categoria']

# Modelo Naive Bayes
modelo = MultinomialNB()
modelo.fit(X, y)

# Guardado de modelo y vectorizador
with open('vectorizer.pkl', 'wb') as f:
    pickle.dump(vectorizer, f)

with open('ticket_classifier.pkl', 'wb') as f:
    pickle.dump(modelo, f)

print("‚úÖ Modelo entrenado y guardado como 'ticket_classifier.pkl' y 'vectorizer.pkl'")

# ==============================
# 2. INTEGRACI√ìN EN APP.PY
# ==============================

import streamlit as st
import pickle

# Cargar el modelo entrenado
with open('vectorizer.pkl', 'rb') as f:
    vectorizer = pickle.load(f)

with open('ticket_classifier.pkl', 'rb') as f:
    modelo = pickle.load(f)

def analizar_ticket_ia(texto_ticket):
    X = vectorizer.transform([texto_ticket])
    resultado = modelo.predict(X)
    return resultado[0]

# M√≥dulo de An√°lisis de Ciberseguridad en Streamlit
st.set_page_config(page_title="Smart Support - Ciberseguridad", layout="wide")
st.title("üé´ Smart Support ‚Äì Sistema de Tickets")
st.subheader("Tu Asistente de Seguridad y Soporte Post-Implementaci√≥n")

modulos = [
    "Seleccionar",
    "Generar Ticket",
    "Ver Tickets",
    "Ver Tutoriales",
    "An√°lisis de Ciberseguridad",
    "Dashboard de Estad√≠sticas",
    "Procesos de Proyectos"
]

seleccion_modulo = st.selectbox("üéØ Selecciona un m√≥dulo:", modulos)

if seleccion_modulo == "An√°lisis de Ciberseguridad":
    st.header("üõ°Ô∏è An√°lisis de Ciberseguridad")
    texto_ticket = st.text_area("üîé Ingresa el texto del ticket para analizar:")

    if st.button("Analizar"):
        resultado = analizar_ticket_ia(texto_ticket)

        if resultado == "Incidente":
            st.error("üö® Se detect√≥ un incidente. Crear ticket autom√°ticamente o escalar.")
            # Aqu√≠ podr√≠as integrar con el m√≥dulo de tickets
        else:
            st.success("‚úÖ No es un incidente. Mostrar soluci√≥n sugerida o cerrar el ticket.")

elif seleccion_modulo == "Dashboard de Estad√≠sticas":
    st.header("üìä Dashboard de Estad√≠sticas")
    st.info("(Aqu√≠ integras tus gr√°ficos de matplotlib o plotly)")

elif seleccion_modulo == "Procesos de Proyectos":
    st.header("üìÅ Procesos de Proyectos")
    st.info("(Aqu√≠ se mostrar√°n los proyectos de implementaci√≥n)")

else:
    st.warning("Selecciona un m√≥dulo para comenzar.")
